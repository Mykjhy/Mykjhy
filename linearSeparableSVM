from sklearn.datasets import make_blobs
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import numpy as np

#初始化线性可分数据集
X,y = make_blobs(n_samples=50, centers=2, random_state=0,cluster_std=0.6)
plt.scatter(X[:,0],X[:,1],c=y,s=20)
plt.xticks([])
plt.yticks([])
plt.show()

plt.scatter(X[:,0],X[:,1],c=y,s=20)
ax=plt.gca()

xlim = ax.get_xlim()
ylim = ax.get_ylim()

#在最大值和最小值之间形成30个规律的数据
axisx = np.linspace(xlim[0],xlim[1],30)
axisy = np.linspace(ylim[0],ylim[1],30)

axisy,axisx = np.meshgrid(axisy,axisx) 
#使用这里形成的二维数组作为contour函数中的X和Y 
#使用meshgrid函数将两个一维向量转换为特征矩阵

ax = plt.gca() #获取当前的子图，如果不存在，则创建新的子图#建模，通过fit计算出对应的决策边界
clf = SVC(kernel = "linear").fit(X,y) 
Z = clf.decision_function(xy).reshape(axisx.shape) 
#返回每个输入的样本所对应的到决策边界的距离
#画决策边界和平行于决策边界的超平面
ax.contour(axisx,axisy,Z
            ,colors="r"
            ,levels=[-1,0,1] #画三条Z=-1，0和1的三条线
            ,alpha=0.5
            ,linestyles=["--","-","--"])
ax.set_xlim(xlim)
ax.set_ylim(ylim)
